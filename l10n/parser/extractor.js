import { readFile, writeFile } from "node:fs/promises";

import path from "node:path";

import { fileURLToPath } from "node:url";

import {
  Comment,
  Identifier,
  Message,
  Pattern,
  TextElement,
  parse,
  serialize,
} from "@fluent/syntax";
import { Node, Project, SyntaxKind } from "ts-morph";

import { generateIdFromString } from "../utils.js";

/**
 * @import { PropertyAccessExpression, TaggedTemplateExpression } from "ts-morph";
 */

const __dirname = path.dirname(fileURLToPath(import.meta.url));

export async function extract() {
  const manualStrings = await readFile(
    fileURLToPath(import.meta.resolve("../locales/en-US.ftl")),
    "utf8",
  );
  const fluentResource = parse(manualStrings, {});

  const project = new Project({});
  project.addSourceFilesAtPaths(
    path.join(__dirname, "..", "..", "components", "**", "*.js"),
  );

  /** @type {Map<string, string>} */
  const map = new Map();

  for (const file of project.getSourceFiles()) {
    for (const taggedTemplate of file.getDescendantsOfKind(
      SyntaxKind.TaggedTemplateExpression,
    )) {
      const tagNode = taggedTemplate.getTag();
      if (Node.isCallExpression(tagNode)) {
        // e.g. this.l10n("foobar")`barfoo`
        const expr = tagNode.getExpression();
        if (Node.isPropertyAccessExpression(expr) && isL10nTag(expr)) {
          const [arg] = tagNode.getArguments();
          if (Node.isStringLiteral(arg)) {
            const key = arg.getLiteralValue();
            const value = getLiteralValue(taggedTemplate);
            map.set(key, value);
          }
        }
      } else if (
        Node.isPropertyAccessExpression(tagNode) &&
        isL10nTag(tagNode)
      ) {
        // e.g. this.l10n`barfoo`
        const value = getLiteralValue(taggedTemplate);
        const key = generateIdFromString(value);
        map.set(key, value);
      }
    }
  }

  fluentResource.body = [
    new Comment(
      `WARNING: do not edit this file, it's automatically generated by ExtractL10nPlugin.
If you need to manually add strings, do so in ./locales/en-US.ftl. See ./README.md for more details.`,
    ),
    ...fluentResource.body.filter(
      (entry) =>
        !(
          entry instanceof Comment &&
          (entry.content.startsWith("WARNING") ||
            entry.content.startsWith("TODO"))
        ),
    ),
    ...[...map].map(
      ([key, value]) =>
        new Message(new Identifier(key), new Pattern([new TextElement(value)])),
    ),
  ];

  await writeFile(
    fileURLToPath(import.meta.resolve("../template.ftl")),
    serialize(fluentResource, {}),
    "utf8",
  );
}

/**
 * @param {PropertyAccessExpression} tagNode
 */
function isL10nTag(tagNode) {
  return (
    ["context", "this"].includes(tagNode.getExpression().getText()) &&
    "l10n" === tagNode.getName()
  );
}

/**
 * @param {TaggedTemplateExpression} taggedTemplate
 */
function getLiteralValue(taggedTemplate) {
  const template = taggedTemplate.getTemplate();
  if (Node.isNoSubstitutionTemplateLiteral(template)) {
    return template.getLiteralValue();
  } else {
    throw new Error(
      `L10n extractor: \`${taggedTemplate.getText()}\` has substitutions, which we don't support`,
    );
  }
}

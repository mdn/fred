import fs from "node:fs/promises";
import path from "node:path";

import { kebabToPascalCase } from "../../utils/name-transformation.js";
import { crawl } from "../utils.js";

/**
 * @import { Compiler } from "@rspack/core"
 */

export class GenerateElementMapPlugin {
  /**
   * @param {Compiler} compiler
   */
  apply(compiler) {
    compiler.hooks.beforeCompile.tapPromise(
      "GenerateElementMapPlugin",
      async () => {
        const files = await crawl(
          path.join(compiler.context, "components"),
          (filePath) => filePath.endsWith("/element.js"),
        );

        const mapping = files.map((filePath) => {
          const relPath =
            "../" +
            path.relative(compiler.context, filePath).replaceAll("\\", "/");
          const folderName = relPath.split("/").at(-2);
          const tagName = `mdn-${folderName}`;
          const className = kebabToPascalCase(tagName);
          return `"${tagName}": import("${relPath}").${className};`;
        });

        const content = `// WARNING: do not edit this file, it's automatically generated by GenerateElementMapPlugin

declare global {
  interface HTMLElementTagNameMap {
    ${mapping.toSorted().join(`
    `)}
  }
}

export {};
`;

        const outPath = path.resolve(
          compiler.context,
          "types",
          "element-map.d.ts",
        );
        fs.writeFile(outPath, content);
      },
    );
  }
}
